library(readr)
listings <- read_csv("DataSets/listings.csv")
View(listings)
summary(listings)
Str(listings)
summary(listings)
str(listings)
library(tidyverse)
library(dplyr)
# Function to Check for Missing Values--------------
missing_data <- function(df) {
missing <- sapply(df, function(x) sum(is.na(x)))
missing_df <- data.frame(Feature = names(missing), MissingValues = missing)
missing_df <- missing_df[missing_df$MissingValues > 0,]
return(missing_df)
}
# Call the function
missing_data(listings)
# Function to Check for Duplicate Values--------------
check_duplicates <- function(df) {
return(anyDuplicated(df))
}
# Call the function
check_duplicates(listings)
# Function to Identify and Remove Outliers--------------
remove_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
df <- df[df[[column_name]] > lower_bound & df[[column_name]] < upper_bound, ]
return(df)
}
# Call the function for 'price' column
listings <- remove_outliers(listings, 'price')
remove_outliers
# Function to Regularize Columns--------------
encode_room_type <- function(df) {
df$room_type <- ifelse(df$room_type == "Private room", 1, 0)
return(df)
}
normalize_cols <- function(df, cols) {
for (col in cols) {
df[[col]] <- (df[[col]] - min(df[[col]], na.rm = TRUE)) / (max(df[[col]], na.rm = TRUE) - min(df[[col]], na.rm = TRUE))
}
return(df)
}
# Call the functions
listings <- encode_room_type(listings)
listings <- normalize_cols(listings, c("latitude", "longitude"))
# Calculate correlations--------------
correlations <- cor(listings %>% select_if(is.numeric), use="complete.obs")
# Show correlations as heatmap
heatmap(correlations)
# Function to Check for Missing Values--------------
missing_data <- function(df) {
missing <- sapply(df, function(x) sum(is.na(x)))
missing_df <- data.frame(Feature = names(missing), MissingValues = missing)
missing_df <- missing_df[missing_df$MissingValues > 0,]
return(missing_df)
}
# Call the function
missing_data(listings)
# Function to Check for Duplicate Values--------------
check_duplicates <- function(df) {
return(anyDuplicated(df))
}
# Call the function
check_duplicates(listings)
# Function to Identify and Remove Outliers--------------
remove_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
df <- df[df[[column_name]] > lower_bound & df[[column_name]] < upper_bound, ]
return(df)
}
# Call the function for 'price' column
remove_outliers
listings <- remove_outliers(listings, 'price')
# Function to Regularize Columns--------------
encode_room_type <- function(df) {
df$room_type <- ifelse(df$room_type == "Private room", 1, 0)
return(df)
}
normalize_cols <- function(df, cols) {
for (col in cols) {
df[[col]] <- (df[[col]] - min(df[[col]], na.rm = TRUE)) / (max(df[[col]], na.rm = TRUE) - min(df[[col]], na.rm = TRUE))
}
return(df)
}
# Call the functions
listings <- encode_room_type(listings)
listings <- normalize_cols(listings, c("latitude", "longitude"))
# Calculate correlations--------------
correlations <- cor(listings %>% select_if(is.numeric), use="complete.obs")
# Show correlations as heatmap
heatmap(correlations)
# Function to Check for Missing Values--------------
missing_data <- function(df) {
missing <- sapply(df, function(x) sum(is.na(x)))
missing_df <- data.frame(Feature = names(missing), MissingValues = missing)
missing_df <- missing_df[missing_df$MissingValues > 0,]
return(missing_df)
}
# Call the function
missing_data(listings)
# Function to Check for Duplicate Values--------------
check_duplicates <- function(df) {
return(anyDuplicated(df))
}
# Call the function
check_duplicates(listings)
# Function to Identify and Remove Outliers--------------
remove_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
df <- df[df[[column_name]] > lower_bound & df[[column_name]] < upper_bound, ]
return(df)
}
# Function to Identify and Count Outliers------------
count_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
outliers = df[df[[column_name]] <= lower_bound | df[[column_name]] >= upper_bound, ]
return(nrow(outliers))
}
# Function to Identify and Count Outliers------------
count_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
outliers = df[df[[column_name]] <= lower_bound | df[[column_name]] >= upper_bound, ]
return(nrow(outliers))
}
# Call the function for 'price' column
count_outliers
count_outliers(listings, 'price')
# Function to Identify and Count Outliers------------
count_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
outliers = df[df[[column_name]] <= lower_bound | df[[column_name]] >= upper_bound, ]
return(nrow(outliers))
}
# Call the function for 'price' column
count_outliers
count_outliers(listings, 'price')
# Function to Identify and Count Outliers------------
count_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
outliers = df[df[[column_name]] <= lower_bound | df[[column_name]] >= upper_bound, ]
return(nrow(outliers))
}
# Call the function for 'price' column
count_outliers(listings, 'price')
# Function to Identify and Remove Outliers--------------
remove_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
df <- df[df[[column_name]] > lower_bound & df[[column_name]] < upper_bound, ]
return(df)
}
# Function to Identify and Remove Outliers--------------
remove_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
df <- df[df[[column_name]] > lower_bound & df[[column_name]] < upper_bound, ]
return(df)
}
# Call the function for 'price' column
remove_outliers
listings <- remove_outliers(listings, 'price')
# Function to Identify and Remove Outliers--------------
remove_outliers <- function(df, column_name) {
IQR = IQR(df[[column_name]], na.rm = TRUE)
lower_bound = quantile(df[[column_name]], 0.25, na.rm = TRUE) - 1.5 * IQR
upper_bound = quantile(df[[column_name]], 0.75, na.rm = TRUE) + 1.5 * IQR
df <- df[df[[column_name]] > lower_bound & df[[column_name]] < upper_bound, ]
return(df)
}
# Call the function for 'price' column
listings <- remove_outliers(listings, 'price')
# Function to Regularize Columns--------------
encode_room_type <- function(df) {
df$room_type <- ifelse(df$room_type == "Private room", 1, 0)
return(df)
}
normalize_cols <- function(df, cols) {
for (col in cols) {
df[[col]] <- (df[[col]] - min(df[[col]], na.rm = TRUE)) / (max(df[[col]], na.rm = TRUE) - min(df[[col]], na.rm = TRUE))
}
return(df)
}
# Call the functions
listings <- encode_room_type(listings)
listings <- normalize_cols(listings, c("latitude", "longitude"))
# Calculate correlations--------------
correlations <- cor(listings %>% select_if(is.numeric), use="complete.obs")
# Show correlations as heatmap
heatmap(correlations)
summary(listings)
str(listings)
